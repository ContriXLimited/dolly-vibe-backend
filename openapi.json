{
  "openapi": "3.0.0",
  "paths": {
    "/auth/profile": {
      "get": {
        "operationId": "AuthController_getProfile",
        "summary": "Get current user profile (requires wallet login JWT)",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "clj123456789"
                    },
                    "walletAddress": {
                      "type": "string",
                      "example": "0x1234567890123456789012345678901234567890"
                    },
                    "discordId": {
                      "type": "string",
                      "example": "123456789"
                    },
                    "twitterId": {
                      "type": "string",
                      "example": "987654321"
                    },
                    "discordUsername": {
                      "type": "string",
                      "example": "user#1234"
                    },
                    "twitterUsername": {
                      "type": "string",
                      "example": "dollyuser"
                    },
                    "allConnected": {
                      "type": "boolean",
                      "example": true
                    },
                    "isJoined": {
                      "type": "boolean",
                      "example": true
                    },
                    "isFollowed": {
                      "type": "boolean",
                      "example": true
                    },
                    "status": {
                      "type": "string",
                      "example": "NORMAL"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/vibe-users": {
      "post": {
        "operationId": "VibeUserController_create",
        "summary": "Create a new VibeUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVibeUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "VibeUser created successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Discord ID or Twitter ID already exists"
          }
        },
        "tags": [
          "VibeUser Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "VibeUserController_findAll",
        "summary": "Get all VibeUsers with filtering and pagination",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "discordId",
            "required": false,
            "in": "query",
            "description": "Discord user ID",
            "schema": {
              "example": "123456789",
              "type": "string"
            }
          },
          {
            "name": "twitterId",
            "required": false,
            "in": "query",
            "description": "Twitter user ID",
            "schema": {
              "example": "987654321",
              "type": "string"
            }
          },
          {
            "name": "isJoined",
            "required": false,
            "in": "query",
            "description": "是否加入0G项目方Discord",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "isFollowed",
            "required": false,
            "in": "query",
            "description": "是否关注Dolly Twitter",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "用户状态",
            "schema": {
              "enum": [
                "NORMAL",
                "BLACKLIST"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of VibeUsers retrieved successfully"
          }
        },
        "tags": [
          "VibeUser Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/vibe-users/statistics": {
      "get": {
        "operationId": "VibeUserController_getStatistics",
        "summary": "Get VibeUser statistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Statistics retrieved successfully"
          }
        },
        "tags": [
          "VibeUser Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/vibe-users/discord/{discordId}": {
      "get": {
        "operationId": "VibeUserController_findByDiscordId",
        "summary": "Find VibeUser by Discord ID",
        "parameters": [
          {
            "name": "discordId",
            "required": true,
            "in": "path",
            "description": "Discord user ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "VibeUser found"
          },
          "404": {
            "description": "VibeUser not found"
          }
        },
        "tags": [
          "VibeUser Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/vibe-users/twitter/{twitterId}": {
      "get": {
        "operationId": "VibeUserController_findByTwitterId",
        "summary": "Find VibeUser by Twitter ID",
        "parameters": [
          {
            "name": "twitterId",
            "required": true,
            "in": "path",
            "description": "Twitter user ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "VibeUser found"
          },
          "404": {
            "description": "VibeUser not found"
          }
        },
        "tags": [
          "VibeUser Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/vibe-users/{id}": {
      "get": {
        "operationId": "VibeUserController_findOne",
        "summary": "Get VibeUser by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "VibeUser ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "VibeUser retrieved successfully"
          },
          "404": {
            "description": "VibeUser not found"
          }
        },
        "tags": [
          "VibeUser Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "VibeUserController_update",
        "summary": "Update VibeUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "VibeUser ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVibeUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "VibeUser updated successfully"
          },
          "404": {
            "description": "VibeUser not found"
          },
          "409": {
            "description": "Discord ID or Twitter ID already exists"
          }
        },
        "tags": [
          "VibeUser Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "VibeUserController_remove",
        "summary": "Delete VibeUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "VibeUser ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "VibeUser deleted successfully"
          },
          "404": {
            "description": "VibeUser not found"
          }
        },
        "tags": [
          "VibeUser Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/vibe-users/{id}/status": {
      "patch": {
        "operationId": "VibeUserController_updateStatus",
        "summary": "Update VibeUser status",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "VibeUser ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status updated successfully"
          },
          "404": {
            "description": "VibeUser not found"
          }
        },
        "tags": [
          "VibeUser Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/vibe-users/{id}/social-status": {
      "patch": {
        "operationId": "VibeUserController_updateSocialStatus",
        "summary": "Update VibeUser social status (joined/followed)",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "VibeUser ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Social status updated successfully"
          },
          "404": {
            "description": "VibeUser not found"
          }
        },
        "tags": [
          "VibeUser Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/auth/wallet/nonce": {
      "get": {
        "operationId": "WalletController_getNonce",
        "summary": "获取钱包签名用的nonce",
        "parameters": [
          {
            "name": "walletAddress",
            "required": true,
            "in": "query",
            "schema": {
              "example": "0x1234567890123456789012345678901234567890",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Nonce generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nonce": {
                      "type": "string",
                      "example": "abc123def456"
                    },
                    "message": {
                      "type": "string",
                      "example": "Please sign this message to verify your wallet: abc123def456"
                    },
                    "expiresAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid wallet address"
          }
        },
        "tags": [
          "Wallet Verification"
        ]
      }
    },
    "/auth/wallet/verify": {
      "post": {
        "operationId": "WalletController_verifyWallet",
        "summary": "验证钱包签名并登录（钱包连接即登录）",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyWalletDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Wallet verified successfully and user logged in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletLoginResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid signature or nonce"
          }
        },
        "tags": [
          "Wallet Verification"
        ]
      }
    },
    "/auth/wallet/status": {
      "get": {
        "operationId": "WalletController_getWalletStatus",
        "summary": "检查钱包连接状态",
        "parameters": [
          {
            "name": "walletAddress",
            "required": true,
            "in": "query",
            "schema": {
              "example": "0x1234567890123456789012345678901234567890",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Wallet status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "connected": {
                      "type": "boolean",
                      "example": true
                    },
                    "walletAddress": {
                      "type": "string",
                      "example": "0x1234567890123456789012345678901234567890"
                    },
                    "verifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Wallet Verification"
        ]
      }
    },
    "/auth/discord/oauth-url": {
      "get": {
        "operationId": "DiscordController_getOAuthUrl",
        "summary": "获取Discord OAuth授权链接",
        "parameters": [
          {
            "name": "walletAddress",
            "required": true,
            "in": "query",
            "description": "Wallet address to bind Discord account to",
            "schema": {
              "example": "0x1234567890123456789012345678901234567890",
              "type": "string"
            }
          },
          {
            "name": "callbackUrl",
            "required": false,
            "in": "query",
            "description": "Custom callback URL (optional, uses .env default if not provided)",
            "schema": {
              "example": "https://custom-domain.com/auth/discord/callback",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OAuth URL generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "oauthUrl": {
                      "type": "string",
                      "example": "https://discord.com/api/oauth2/authorize?..."
                    },
                    "walletAddress": {
                      "type": "string",
                      "example": "0x1234567890123456789012345678901234567890"
                    },
                    "callbackUrl": {
                      "type": "string",
                      "example": "https://custom-domain.com/callback"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Discord Integration"
        ]
      }
    },
    "/auth/discord/oauth": {
      "get": {
        "operationId": "DiscordController_startOAuth",
        "summary": "启动Discord OAuth授权流程（直接重定向）",
        "parameters": [
          {
            "name": "walletAddress",
            "required": true,
            "in": "query",
            "description": "Wallet address to bind Discord account to",
            "schema": {
              "example": "0x1234567890123456789012345678901234567890",
              "type": "string"
            }
          },
          {
            "name": "callbackUrl",
            "required": false,
            "in": "query",
            "description": "Custom callback URL (optional)",
            "schema": {
              "example": "https://custom-domain.com/auth/discord/callback",
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to Discord OAuth page"
          }
        },
        "tags": [
          "Discord Integration"
        ]
      }
    },
    "/auth/discord/callback": {
      "get": {
        "operationId": "DiscordController_handleCallback",
        "summary": "Discord OAuth回调处理",
        "parameters": [
          {
            "name": "code",
            "required": true,
            "in": "query",
            "description": "Discord authorization code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "required": false,
            "in": "query",
            "description": "OAuth state parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "callbackUrl",
            "required": false,
            "in": "query",
            "description": "Original callback URL used for token exchange",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Discord OAuth completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "discordId": {
                      "type": "string",
                      "example": "123456789"
                    },
                    "username": {
                      "type": "string",
                      "example": "user#1234"
                    },
                    "isInGuild": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Discord connection successful"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "OAuth callback failed"
          }
        },
        "tags": [
          "Discord Integration"
        ]
      }
    },
    "/auth/discord/status": {
      "get": {
        "operationId": "DiscordController_getDiscordStatus",
        "summary": "检查Discord连接状态",
        "parameters": [
          {
            "name": "discordId",
            "required": false,
            "in": "query",
            "description": "Discord user ID to check status for",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Discord status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialConnectionStatusDto"
                }
              }
            }
          }
        },
        "tags": [
          "Discord Integration"
        ]
      }
    },
    "/auth/discord/guild-invite": {
      "get": {
        "operationId": "DiscordController_getGuildInvite",
        "summary": "获取0G Discord服务器邀请链接",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Discord invite link",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "inviteUrl": {
                      "type": "string",
                      "example": "https://discord.gg/0g-invite"
                    },
                    "guildName": {
                      "type": "string",
                      "example": "0G Network"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Discord Integration"
        ]
      }
    },
    "/auth/discord/check-membership": {
      "post": {
        "operationId": "DiscordController_checkMembership",
        "summary": "检查用户Discord频道关注状态并更新数据库",
        "parameters": [
          {
            "name": "discordId",
            "required": true,
            "in": "query",
            "description": "Discord user ID to check membership for",
            "schema": {
              "example": "123456789",
              "type": "string"
            }
          },
          {
            "name": "accessToken",
            "required": false,
            "in": "query",
            "description": "Discord access token for API check (optional, will use bot token if not provided)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Discord membership status checked and updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "discordId": {
                      "type": "string",
                      "example": "123456789"
                    },
                    "isJoined": {
                      "type": "boolean",
                      "example": true
                    },
                    "updated": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User is a member of the Discord server"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        },
        "tags": [
          "Discord Integration"
        ]
      }
    },
    "/auth/discord/batch-check-membership": {
      "post": {
        "operationId": "DiscordController_batchCheckMembership",
        "summary": "批量检查多个用户的Discord频道关注状态",
        "parameters": [
          {
            "name": "discordIds",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Batch Discord membership status check completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "discordId": {
                            "type": "string",
                            "example": "123456789"
                          },
                          "isJoined": {
                            "type": "boolean",
                            "example": true
                          },
                          "updated": {
                            "type": "boolean",
                            "example": false
                          },
                          "error": {
                            "type": "string",
                            "example": "User not found"
                          }
                        }
                      }
                    },
                    "summary": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "example": 5
                        },
                        "joined": {
                          "type": "number",
                          "example": 3
                        },
                        "updated": {
                          "type": "number",
                          "example": 2
                        },
                        "errors": {
                          "type": "number",
                          "example": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Discord Integration"
        ]
      }
    },
    "/auth/discord/test-bot-config": {
      "get": {
        "operationId": "DiscordController_testBotConfiguration",
        "summary": "测试Discord Bot配置",
        "description": "检查Discord Bot Token是否有效，以及Bot是否能访问目标Guild",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Bot configuration test results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "botTokenValid": {
                      "type": "boolean",
                      "example": true
                    },
                    "guildAccessible": {
                      "type": "boolean",
                      "example": true
                    },
                    "guildId": {
                      "type": "string",
                      "example": "123456789"
                    },
                    "botPermissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "123456789",
                        "987654321"
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bot lacks View Server Members permission"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Discord Integration"
        ]
      }
    },
    "/auth/twitter/oauth-url": {
      "get": {
        "operationId": "TwitterController_getOAuthUrl",
        "summary": "获取Twitter OAuth授权链接",
        "parameters": [
          {
            "name": "walletAddress",
            "required": true,
            "in": "query",
            "description": "Wallet address to bind Twitter account to",
            "schema": {
              "example": "0x1234567890123456789012345678901234567890",
              "type": "string"
            }
          },
          {
            "name": "callbackUrl",
            "required": false,
            "in": "query",
            "description": "Custom callback URL (optional, uses .env default if not provided)",
            "schema": {
              "example": "https://custom-domain.com/auth/twitter/callback",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OAuth URL generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "oauthUrl": {
                      "type": "string",
                      "example": "https://api.twitter.com/oauth/authenticate?..."
                    },
                    "walletAddress": {
                      "type": "string",
                      "example": "0x1234567890123456789012345678901234567890"
                    },
                    "callbackUrl": {
                      "type": "string",
                      "example": "https://custom-domain.com/callback"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Twitter Integration"
        ]
      }
    },
    "/auth/twitter/oauth": {
      "get": {
        "operationId": "TwitterController_startOAuth",
        "summary": "启动Twitter OAuth授权流程（直接重定向）",
        "parameters": [
          {
            "name": "walletAddress",
            "required": true,
            "in": "query",
            "description": "Wallet address to bind Twitter account to",
            "schema": {
              "example": "0x1234567890123456789012345678901234567890",
              "type": "string"
            }
          },
          {
            "name": "callbackUrl",
            "required": false,
            "in": "query",
            "description": "Custom callback URL (optional)",
            "schema": {
              "example": "https://custom-domain.com/auth/twitter/callback",
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to Twitter OAuth page"
          }
        },
        "tags": [
          "Twitter Integration"
        ]
      }
    },
    "/auth/twitter/callback": {
      "get": {
        "operationId": "TwitterController_handleCallback",
        "summary": "Twitter OAuth回调处理",
        "parameters": [
          {
            "name": "oauth_token",
            "required": true,
            "in": "query",
            "description": "Twitter OAuth token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "oauth_verifier",
            "required": true,
            "in": "query",
            "description": "Twitter OAuth verifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "walletAddress",
            "required": false,
            "in": "query",
            "description": "Wallet address to bind Twitter account to (optional for backward compatibility)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Twitter OAuth completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "twitterId": {
                      "type": "string",
                      "example": "123456789"
                    },
                    "username": {
                      "type": "string",
                      "example": "dollyuser"
                    },
                    "displayName": {
                      "type": "string",
                      "example": "Dolly User"
                    },
                    "isFollowingDolly": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Twitter connection successful"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "OAuth callback failed"
          }
        },
        "tags": [
          "Twitter Integration"
        ]
      }
    },
    "/auth/twitter/status": {
      "get": {
        "operationId": "TwitterController_getTwitterStatus",
        "summary": "检查Twitter连接状态",
        "parameters": [
          {
            "name": "twitterId",
            "required": false,
            "in": "query",
            "description": "Twitter user ID to check status for",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Twitter status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialConnectionStatusDto"
                }
              }
            }
          }
        },
        "tags": [
          "Twitter Integration"
        ]
      }
    },
    "/auth/twitter/check-follow": {
      "get": {
        "operationId": "TwitterController_checkFollowStatus",
        "summary": "检查用户是否关注Dolly",
        "parameters": [
          {
            "name": "username",
            "required": true,
            "in": "query",
            "description": "Twitter username to check (without @)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Follow status checked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isFollowing": {
                      "type": "boolean",
                      "example": true
                    },
                    "sourceUser": {
                      "type": "string",
                      "example": "username123"
                    },
                    "targetUser": {
                      "type": "string",
                      "example": "AskDollyToday"
                    },
                    "message": {
                      "type": "string",
                      "example": "Follow status checked successfully"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Twitter Integration"
        ]
      }
    },
    "/auth/twitter/dolly-profile": {
      "get": {
        "operationId": "TwitterController_getDollyProfile",
        "summary": "获取Dolly Twitter资料链接",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Dolly Twitter profile info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "profileUrl": {
                      "type": "string",
                      "example": "https://twitter.com/AskDollyToday"
                    },
                    "username": {
                      "type": "string",
                      "example": "AskDollyToday"
                    },
                    "displayName": {
                      "type": "string",
                      "example": "Ask Dolly Today"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Twitter Integration"
        ]
      }
    },
    "/auth/user/status/{id}": {
      "get": {
        "operationId": "UserStatusController_getUserStatus",
        "summary": "获取用户所有连接状态",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "VibeUser ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User connection status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "discord": {
                      "type": "object",
                      "properties": {
                        "connected": {
                          "type": "boolean",
                          "example": true
                        },
                        "username": {
                          "type": "string",
                          "example": "user#1234"
                        },
                        "userId": {
                          "type": "string",
                          "example": "123456789"
                        },
                        "verified": {
                          "type": "boolean",
                          "example": true,
                          "description": "是否加入0G Discord"
                        },
                        "connectedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "twitter": {
                      "type": "object",
                      "properties": {
                        "connected": {
                          "type": "boolean",
                          "example": true
                        },
                        "username": {
                          "type": "string",
                          "example": "dollyuser"
                        },
                        "userId": {
                          "type": "string",
                          "example": "987654321"
                        },
                        "verified": {
                          "type": "boolean",
                          "example": true,
                          "description": "是否关注Dolly"
                        },
                        "connectedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "wallet": {
                      "type": "object",
                      "properties": {
                        "connected": {
                          "type": "boolean",
                          "example": true
                        },
                        "walletAddress": {
                          "type": "string",
                          "example": "0x123...789"
                        },
                        "verifiedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "overall": {
                      "type": "object",
                      "properties": {
                        "allConnected": {
                          "type": "boolean",
                          "example": true
                        },
                        "completedAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "canProceed": {
                          "type": "boolean",
                          "example": true,
                          "description": "是否可以点击Let's Vibe按钮"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User Connection Status"
        ]
      }
    },
    "/auth/user/status": {
      "get": {
        "operationId": "UserStatusController_getUserStatusByIdentifier",
        "summary": "根据标识符获取用户连接状态",
        "parameters": [
          {
            "name": "discordId",
            "required": false,
            "in": "query",
            "description": "Discord user ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "twitterId",
            "required": false,
            "in": "query",
            "description": "Twitter user ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "walletAddress",
            "required": false,
            "in": "query",
            "description": "Wallet address",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User status retrieved or created successfully"
          }
        },
        "tags": [
          "User Connection Status"
        ]
      }
    },
    "/auth/user/connect/discord": {
      "post": {
        "operationId": "UserStatusController_updateDiscordConnection",
        "summary": "更新用户Discord连接状态",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Discord status updated successfully"
          }
        },
        "tags": [
          "User Connection Status"
        ]
      }
    },
    "/auth/user/connect/twitter": {
      "post": {
        "operationId": "UserStatusController_updateTwitterConnection",
        "summary": "更新用户Twitter连接状态",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Twitter status updated successfully"
          }
        },
        "tags": [
          "User Connection Status"
        ]
      }
    },
    "/auth/user/connect/wallet": {
      "post": {
        "operationId": "UserStatusController_updateWalletConnection",
        "summary": "更新用户钱包连接状态",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Wallet status updated successfully"
          }
        },
        "tags": [
          "User Connection Status"
        ]
      }
    },
    "/auth/user/status-by-wallet": {
      "get": {
        "operationId": "UserStatusController_getUserStatusByWallet",
        "summary": "根据Wallet地址获取用户完整状态（实时检查Discord和Twitter关注状态）",
        "description": "此接口会自动检查用户的Discord频道关注状态和Twitter关注状态，如果发现状态变化会自动更新数据库",
        "parameters": [
          {
            "name": "walletAddress",
            "required": true,
            "in": "query",
            "description": "Ethereum wallet address",
            "schema": {
              "example": "0x1234567890123456789012345678901234567890",
              "type": "string"
            }
          },
          {
            "name": "skipRealTimeCheck",
            "required": false,
            "in": "query",
            "description": "跳过实时检查，仅返回数据库中的状态（默认false）",
            "schema": {
              "example": false,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User status retrieved and updated successfully by wallet address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "vibeUserId": {
                      "type": "string",
                      "example": "clj123456789",
                      "description": "VibeUser ID"
                    },
                    "walletAddress": {
                      "type": "string",
                      "example": "0x1234567890123456789012345678901234567890",
                      "description": "Wallet address"
                    },
                    "status": {
                      "type": "object",
                      "properties": {
                        "discord": {
                          "type": "object",
                          "properties": {
                            "connected": {
                              "type": "boolean",
                              "example": true
                            },
                            "username": {
                              "type": "string",
                              "example": "user#1234"
                            },
                            "userId": {
                              "type": "string",
                              "example": "123456789"
                            },
                            "isJoined": {
                              "type": "boolean",
                              "example": true,
                              "description": "是否加入Discord服务器（已实时检查）"
                            },
                            "connectedAt": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "twitter": {
                          "type": "object",
                          "properties": {
                            "connected": {
                              "type": "boolean",
                              "example": true
                            },
                            "username": {
                              "type": "string",
                              "example": "dollyuser"
                            },
                            "userId": {
                              "type": "string",
                              "example": "987654321"
                            },
                            "isFollowed": {
                              "type": "boolean",
                              "example": true,
                              "description": "是否关注Dolly Twitter（已实时检查）"
                            },
                            "connectedAt": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "wallet": {
                          "type": "object",
                          "properties": {
                            "connected": {
                              "type": "boolean",
                              "example": true
                            },
                            "walletAddress": {
                              "type": "string",
                              "example": "0x123...789"
                            },
                            "verifiedAt": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "overall": {
                          "type": "object",
                          "properties": {
                            "allConnected": {
                              "type": "boolean",
                              "example": true,
                              "description": "所有连接是否完成（实时更新）"
                            },
                            "completedAt": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "canProceed": {
                              "type": "boolean",
                              "example": true,
                              "description": "是否可以点击Let's Vibe按钮"
                            }
                          }
                        }
                      }
                    },
                    "realTimeChecks": {
                      "type": "object",
                      "properties": {
                        "discordChecked": {
                          "type": "boolean",
                          "example": true,
                          "description": "是否进行了Discord实时检查"
                        },
                        "twitterChecked": {
                          "type": "boolean",
                          "example": true,
                          "description": "是否进行了Twitter实时检查"
                        },
                        "statusUpdated": {
                          "type": "boolean",
                          "example": false,
                          "description": "状态是否有更新"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found with this wallet address"
          }
        },
        "tags": [
          "User Connection Status"
        ]
      }
    },
    "/auth/user/stats": {
      "get": {
        "operationId": "UserStatusController_getCompletionStats",
        "summary": "获取用户连接完成统计",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User completion statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "number",
                      "example": 1000,
                      "description": "总用户数"
                    },
                    "completed": {
                      "type": "number",
                      "example": 750,
                      "description": "完成所有连接的用户数"
                    },
                    "completionRate": {
                      "type": "string",
                      "example": "75.00",
                      "description": "完成率百分比"
                    },
                    "connections": {
                      "type": "object",
                      "properties": {
                        "discord": {
                          "type": "number",
                          "example": 850
                        },
                        "twitter": {
                          "type": "number",
                          "example": 800
                        },
                        "wallet": {
                          "type": "number",
                          "example": 900
                        }
                      }
                    },
                    "verified": {
                      "type": "object",
                      "properties": {
                        "joinedDiscord": {
                          "type": "number",
                          "example": 700
                        },
                        "followedTwitter": {
                          "type": "number",
                          "example": 650
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User Connection Status"
        ]
      }
    },
    "/health": {
      "get": {
        "operationId": "HealthController_healthCheck",
        "summary": "Health check endpoint",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "timestamp": {
                      "type": "string",
                      "example": "2023-12-01T10:00:00.000Z"
                    },
                    "uptime": {
                      "type": "number",
                      "example": 12345
                    },
                    "database": {
                      "type": "string",
                      "example": "connected"
                    },
                    "version": {
                      "type": "string",
                      "example": "1.0.0"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service is unhealthy"
          }
        },
        "tags": [
          "Health Check"
        ]
      }
    },
    "/": {
      "get": {
        "operationId": "HealthController_getRoot",
        "summary": "Root endpoint",
        "parameters": [],
        "responses": {
          "200": {
            "description": "API information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Dolly Vibe API"
                    },
                    "version": {
                      "type": "string",
                      "example": "1.0.0"
                    },
                    "description": {
                      "type": "string",
                      "example": "Dolly Vibe Backend API"
                    },
                    "docs": {
                      "type": "string",
                      "example": "/api"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Health Check"
        ]
      }
    },
    "/vibe-passes/join": {
      "post": {
        "operationId": "VibePassController_joinProject",
        "summary": "Join a Vibe project and create VibePass",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinProjectDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully joined project and created VibePass"
          },
          "400": {
            "description": "Bad request - Invalid project or user data"
          },
          "409": {
            "description": "Conflict - User has already joined this project"
          }
        },
        "tags": [
          "VibePass Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/vibe-passes/{id}/mint": {
      "post": {
        "operationId": "VibePassController_mintInft",
        "summary": "Mint INFT for VibePass",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "VibePass ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MintInftDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully minted INFT"
          },
          "404": {
            "description": "VibePass not found"
          },
          "409": {
            "description": "INFT already minted"
          }
        },
        "tags": [
          "VibePass Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/vibe-passes/{id}/upload-metadata": {
      "post": {
        "operationId": "VibePassController_uploadMetadata",
        "summary": "Step 1: Upload metadata to 0G Storage for INFT minting",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "VibePass ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadMetadataDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully uploaded metadata to 0G Storage"
          },
          "404": {
            "description": "VibePass not found"
          },
          "409": {
            "description": "INFT already minted"
          }
        },
        "tags": [
          "VibePass Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/vibe-passes/{id}/mint-with-metadata": {
      "post": {
        "operationId": "VibePassController_mintWithMetadata",
        "summary": "Step 2: Mint INFT using uploaded metadata",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "VibePass ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MintWithMetadataDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully minted INFT using uploaded metadata"
          },
          "404": {
            "description": "VibePass not found"
          },
          "409": {
            "description": "INFT already minted"
          }
        },
        "tags": [
          "VibePass Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/vibe-passes/my": {
      "get": {
        "operationId": "VibePassController_getMyVibePasses",
        "summary": "Get current user's VibePasses",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved user VibePasses"
          }
        },
        "tags": [
          "VibePass Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/vibe-passes/{id}": {
      "get": {
        "operationId": "VibePassController_getVibePassById",
        "summary": "Get VibePass by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "VibePass ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved VibePass"
          },
          "404": {
            "description": "VibePass not found"
          }
        },
        "tags": [
          "VibePass Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/vibe-passes": {
      "get": {
        "operationId": "VibePassController_queryVibePasses",
        "summary": "Query VibePasses with pagination",
        "parameters": [
          {
            "name": "vibeProjectId",
            "required": false,
            "in": "query",
            "description": "VibeProject ID to filter by",
            "schema": {
              "example": "cuid2-example-vibe-project-id",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (starting from 1)",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved VibePasses"
          }
        },
        "tags": [
          "VibePass Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/vibe-passes/projects/default": {
      "get": {
        "operationId": "VibePassController_getDefaultVibeProject",
        "summary": "Get default VibeProject information",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved default VibeProject"
          },
          "404": {
            "description": "Default VibeProject not found"
          }
        },
        "tags": [
          "VibePass Management"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/profile-updates": {
      "post": {
        "operationId": "ProfileUpdateController_createProfileUpdate",
        "summary": "Create profile update record (AI API)",
        "parameters": [
          {
            "name": "x-ai-secret",
            "in": "header",
            "description": "AI API secret key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProfileUpdateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created profile update"
          },
          "400": {
            "description": "Bad request - Invalid data"
          },
          "401": {
            "description": "Unauthorized - Invalid AI API secret"
          },
          "404": {
            "description": "User or VibePass not found"
          }
        },
        "tags": [
          "Profile Update Management"
        ]
      },
      "get": {
        "operationId": "ProfileUpdateController_getProfileUpdates",
        "summary": "Query profile update records",
        "parameters": [
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "User ID to filter by",
            "schema": {
              "example": "cuid2-example-user-id",
              "type": "string"
            }
          },
          {
            "name": "vibePassId",
            "required": false,
            "in": "query",
            "description": "VibePass ID to filter by",
            "schema": {
              "example": "cuid2-example-vibe-pass-id",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (starting from 1)",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved profile updates"
          }
        },
        "tags": [
          "Profile Update Management"
        ]
      }
    },
    "/profile-updates/{id}": {
      "get": {
        "operationId": "ProfileUpdateController_getProfileUpdateById",
        "summary": "Get profile update record by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ProfileUpdateRecord ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved profile update"
          },
          "404": {
            "description": "Profile update record not found"
          }
        },
        "tags": [
          "Profile Update Management"
        ]
      }
    },
    "/score-records/{vibePassId}": {
      "get": {
        "operationId": "ScoreRecordController_getScoreRecords",
        "summary": "Get score records for a VibePass",
        "parameters": [
          {
            "name": "vibePassId",
            "required": true,
            "in": "path",
            "description": "VibePass ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (starting from 1)",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved score records"
          },
          "404": {
            "description": "VibePass not found"
          }
        },
        "tags": [
          "Score Record Management"
        ]
      }
    },
    "/score-records/record/{id}": {
      "get": {
        "operationId": "ScoreRecordController_getScoreRecordById",
        "summary": "Get score record by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ScoreRecord ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved score record"
          },
          "404": {
            "description": "Score record not found"
          }
        },
        "tags": [
          "Score Record Management"
        ]
      }
    },
    "/leaderboard/{vibeProjectId}": {
      "get": {
        "operationId": "LeaderboardController_getProjectLeaderboard",
        "summary": "Get project leaderboard",
        "parameters": [
          {
            "name": "vibeProjectId",
            "required": true,
            "in": "path",
            "description": "VibeProject ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeWindow",
            "required": false,
            "in": "query",
            "description": "Time window for leaderboard",
            "schema": {
              "default": "all",
              "example": "all",
              "enum": [
                "daily",
                "weekly",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (starting from 1)",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 50,
              "example": 50,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved project leaderboard"
          },
          "404": {
            "description": "VibeProject not found"
          }
        },
        "tags": [
          "Leaderboard"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/leaderboard/global/all": {
      "get": {
        "operationId": "LeaderboardController_getGlobalLeaderboard",
        "summary": "Get global leaderboard",
        "parameters": [
          {
            "name": "timeWindow",
            "required": false,
            "in": "query",
            "description": "Time window for leaderboard",
            "schema": {
              "default": "all",
              "example": "all",
              "enum": [
                "daily",
                "weekly",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (starting from 1)",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 50,
              "example": 50,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved global leaderboard"
          }
        },
        "tags": [
          "Leaderboard"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/leaderboard/{vibeProjectId}/rank/{vibePassId}": {
      "get": {
        "operationId": "LeaderboardController_getUserRank",
        "summary": "Get user rank in project leaderboard",
        "parameters": [
          {
            "name": "vibeProjectId",
            "required": true,
            "in": "path",
            "description": "VibeProject ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vibePassId",
            "required": true,
            "in": "path",
            "description": "VibePass ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeWindow",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user rank"
          },
          "404": {
            "description": "VibeProject or VibePass not found"
          }
        },
        "tags": [
          "Leaderboard"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/leaderboard/global/rank/{vibePassId}": {
      "get": {
        "operationId": "LeaderboardController_getGlobalUserRank",
        "summary": "Get user rank in global leaderboard",
        "parameters": [
          {
            "name": "vibePassId",
            "required": true,
            "in": "path",
            "description": "VibePass ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeWindow",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user global rank"
          },
          "404": {
            "description": "VibePass not found"
          }
        },
        "tags": [
          "Leaderboard"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "Dolly Vibe API",
    "description": "The Dolly Vibe API documentation with VibeUser management, authentication, and more",
    "version": "1.0",
    "contact": {
      "name": "Dolly Vibe Team",
      "url": "https://dollyvibe.com",
      "email": "support@dollyvibe.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "Authentication endpoints"
    },
    {
      "name": "VibeUser Management",
      "description": "VibeUser CRUD operations"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    },
    {
      "url": "https://api.dollyvibe.com",
      "description": "Production server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "CreateVibeUserDto": {
        "type": "object",
        "properties": {
          "discordId": {
            "type": "string",
            "example": "123456789",
            "description": "Discord user ID"
          },
          "twitterId": {
            "type": "string",
            "example": "987654321",
            "description": "Twitter user ID"
          },
          "isJoined": {
            "type": "boolean",
            "example": false,
            "description": "是否加入0G项目方Discord",
            "default": false
          },
          "isFollowed": {
            "type": "boolean",
            "example": false,
            "description": "是否关注Dolly Twitter",
            "default": false
          },
          "status": {
            "type": "string",
            "enum": [
              "NORMAL",
              "BLACKLIST"
            ],
            "example": "NORMAL",
            "description": "用户状态",
            "default": "NORMAL"
          }
        }
      },
      "UpdateVibeUserDto": {
        "type": "object",
        "properties": {
          "discordId": {
            "type": "string",
            "example": "123456789",
            "description": "Discord user ID"
          },
          "twitterId": {
            "type": "string",
            "example": "987654321",
            "description": "Twitter user ID"
          },
          "isJoined": {
            "type": "boolean",
            "example": true,
            "description": "是否加入0G项目方Discord"
          },
          "isFollowed": {
            "type": "boolean",
            "example": true,
            "description": "是否关注Dolly Twitter"
          },
          "status": {
            "type": "string",
            "enum": [
              "NORMAL",
              "BLACKLIST"
            ],
            "example": "NORMAL",
            "description": "用户状态"
          }
        }
      },
      "VerifyWalletDto": {
        "type": "object",
        "properties": {
          "walletAddress": {
            "type": "string",
            "example": "0x1234567890123456789012345678901234567890",
            "description": "Ethereum wallet address"
          },
          "nonce": {
            "type": "string",
            "example": "abc123def456",
            "description": "Nonce received from /nonce endpoint"
          },
          "signature": {
            "type": "string",
            "example": "0x123abc...",
            "description": "Signature from wallet"
          }
        },
        "required": [
          "walletAddress",
          "nonce",
          "signature"
        ]
      },
      "WalletLoginResponseDto": {
        "type": "object",
        "properties": {
          "verified": {
            "type": "boolean",
            "example": true,
            "description": "Whether wallet verification was successful"
          },
          "walletAddress": {
            "type": "string",
            "example": "0x1234567890123456789012345678901234567890",
            "description": "Verified wallet address"
          },
          "access_token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "description": "JWT access token for authentication"
          },
          "user": {
            "type": "object",
            "description": "User information",
            "properties": {
              "id": {
                "type": "string",
                "example": "clj123456789"
              },
              "walletAddress": {
                "type": "string",
                "example": "0x1234567890123456789012345678901234567890"
              },
              "discordId": {
                "type": "string",
                "example": "123456789",
                "nullable": true
              },
              "twitterId": {
                "type": "string",
                "example": "987654321",
                "nullable": true
              },
              "discordUsername": {
                "type": "string",
                "example": "user#1234",
                "nullable": true
              },
              "twitterUsername": {
                "type": "string",
                "example": "dollyuser",
                "nullable": true
              },
              "discordConnected": {
                "type": "boolean",
                "example": false
              },
              "twitterConnected": {
                "type": "boolean",
                "example": false
              },
              "walletConnected": {
                "type": "boolean",
                "example": true
              },
              "isJoined": {
                "type": "boolean",
                "example": false
              },
              "isFollowed": {
                "type": "boolean",
                "example": false
              },
              "allConnected": {
                "type": "boolean",
                "example": false
              },
              "completedAt": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "status": {
                "type": "string",
                "example": "NORMAL"
              }
            }
          }
        },
        "required": [
          "verified",
          "walletAddress",
          "access_token",
          "user"
        ]
      },
      "SocialConnectionStatusDto": {
        "type": "object",
        "properties": {
          "connected": {
            "type": "boolean",
            "example": true,
            "description": "Whether the service is connected"
          },
          "username": {
            "type": "string",
            "example": "username123",
            "description": "Username on the platform"
          },
          "userId": {
            "type": "string",
            "example": "123456789",
            "description": "Platform user ID"
          },
          "verified": {
            "type": "boolean",
            "example": true,
            "description": "Additional verification status (joined/followed)"
          },
          "connectedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Connection timestamp"
          }
        },
        "required": [
          "connected",
          "username",
          "userId",
          "verified",
          "connectedAt"
        ]
      },
      "JoinProjectDto": {
        "type": "object",
        "properties": {
          "vibeProjectId": {
            "type": "string",
            "description": "VibeProject ID (optional, defaults to default project)",
            "example": "cuid2-example-vibe-project-id"
          }
        }
      },
      "MintInftDto": {
        "type": "object",
        "properties": {
          "walletAddress": {
            "type": "string",
            "description": "User wallet address",
            "example": "0x1234567890123456789012345678901234567890"
          },
          "nonce": {
            "type": "string",
            "description": "Nonce from wallet verification",
            "example": "abc123def456"
          },
          "signature": {
            "type": "string",
            "description": "User wallet signature for minting authorization",
            "example": "0x123456789abcdef..."
          },
          "tokenMetadata": {
            "type": "object",
            "description": "Additional token metadata (optional)",
            "example": {
              "name": "User INFT #1",
              "description": "Intelligent NFT for user"
            }
          }
        },
        "required": [
          "walletAddress",
          "nonce",
          "signature"
        ]
      },
      "UploadMetadataDto": {
        "type": "object",
        "properties": {
          "walletAddress": {
            "type": "string",
            "description": "User wallet address",
            "example": "0x1234567890123456789012345678901234567890"
          },
          "nonce": {
            "type": "string",
            "description": "Nonce from wallet verification",
            "example": "abc123def456"
          },
          "signature": {
            "type": "string",
            "description": "User wallet signature for metadata upload authorization",
            "example": "0x123456789abcdef..."
          },
          "tokenMetadata": {
            "type": "object",
            "description": "Additional token metadata (optional)",
            "example": {
              "name": "User INFT #1",
              "description": "Intelligent NFT for user"
            }
          }
        },
        "required": [
          "walletAddress",
          "nonce",
          "signature"
        ]
      },
      "MintWithMetadataDto": {
        "type": "object",
        "properties": {
          "walletAddress": {
            "type": "string",
            "description": "User wallet address",
            "example": "0x1234567890123456789012345678901234567890"
          },
          "rootHash": {
            "type": "string",
            "description": "Root hash from metadata upload",
            "example": "0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890"
          },
          "sealedKey": {
            "type": "string",
            "description": "Sealed key from metadata upload (optional, will use stored value if not provided)",
            "example": "abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890"
          },
          "nonce": {
            "type": "string",
            "description": "Nonce from wallet verification",
            "example": "abc123def456"
          },
          "signature": {
            "type": "string",
            "description": "User wallet signature for minting authorization",
            "example": "0x123456789abcdef..."
          },
          "tokenMetadata": {
            "type": "object",
            "description": "Additional token metadata (optional)",
            "example": {
              "name": "User INFT #1",
              "description": "Intelligent NFT for user"
            }
          }
        },
        "required": [
          "walletAddress",
          "rootHash",
          "nonce",
          "signature"
        ]
      },
      "CreateProfileUpdateDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID (for regular User profile update)",
            "example": "cuid2-example-user-id"
          },
          "vibePassId": {
            "type": "string",
            "description": "VibePass ID (for VibePass profile update)",
            "example": "cuid2-example-vibe-pass-id"
          },
          "messageIds": {
            "description": "Message IDs involved in this analysis",
            "example": [
              "msg1",
              "msg2",
              "msg3"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "newProfile": {
            "type": "string",
            "description": "New analyzed user profile",
            "example": "This user is highly engaged in blockchain discussions..."
          },
          "newScore": {
            "type": "number",
            "description": "New analyzed INFT total score",
            "example": 85.5
          },
          "newParams": {
            "description": "New INFT parameter values for radar chart (5 dimensions)",
            "example": [
              75,
              80,
              90,
              70,
              85
            ],
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "newTags": {
            "description": "New analyzed tags",
            "example": [
              "blockchain",
              "defi",
              "active-member"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "newRootHash": {
            "type": "string",
            "description": "New INFT metadata root hash",
            "example": "QmXYZ123..."
          }
        },
        "required": [
          "messageIds",
          "newProfile"
        ]
      }
    }
  }
}